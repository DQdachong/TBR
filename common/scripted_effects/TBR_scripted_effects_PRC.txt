PRC_damage_economic_1 = {
	set_temp_variable = {
		var = consumer_good_factor_temp
		value = 0.02
	}
	set_temp_variable = {
		var = business_value_temp
		value = -0.01
	}
	set_temp_variable = {
		var = personal_value_temp
		value = -0.01
	}
	add_to_variable = {
		var = PRC_economic_recession_consumer_factor_var
		value = 0.02
	}
	add_to_variable = {
		var = PRC_economic_recession_business_value_var
		value = -0.01
	}
	add_to_variable = {
		var = PRC_economic_recession_personal_value_var
		value = -0.01
	}

	custom_effect_tooltip = PRC_modify_recession_ns_tt
}

start_oil_crisis = {
	set_country_flag = PRC_oil_crisis_ongoing
	set_country_flag = PRC_oil_crisis_started
	set_variable = {
		PRC_oil_crisis_a_var = 96
	}
	set_variable = {
		PRC_oil_crisis_b_var = 60
	}
	set_variable = {
		PRC_oil_change_c_var = 16
	}
	activate_mission = PRC_decision_oil_crisis_worsening
	activate_mission = PRC_decision_oil_bank
	add_dynamic_modifier = {
		modifier = PRC_oil_crisis
	}
	update_oil_crisis_modifier = yes
	hidden_effect = {
		country_event = {
			id = china.11
			days = 5
		}
		country_event = {
			id = china.288
			days = 3
		}
		country_event = {
			id = china.289
			days = 30
		}
		country_event = {
			id = china.290
			days = 40
		}
		country_event = {
			id = china.324
			days = 110
		}
	}
	focus_unlock = yes
}

add_oil_crisis_var_a = {
	add_to_variable = {
		var = PRC_oil_crisis_a_var
		value = oil_a_var_temp
	}
	clamp_variable = {
		var = PRC_oil_crisis_a_var
		min = 0
		max = 100
	}
	update_oil_crisis_modifier = yes
	custom_effect_tooltip = add_oil_crisis_var_a_tooltip
}

add_oil_crisis_var_b = {
	add_to_variable = {
		var = PRC_oil_crisis_b_var
		value = oil_b_var_temp
	}
	clamp_variable = {
		var = PRC_oil_crisis_b_var
		min = 0
		max = 100
	}
	update_oil_crisis_modifier = yes
	custom_effect_tooltip = add_oil_crisis_var_b_tooltip
}

add_oil_crisis_var_c = {
	add_to_variable = {
		var = PRC_oil_crisis_c_var
		value = oil_c_var_temp
	}
	clamp_variable = {
		var = PRC_oil_crisis_c_var
		min = 0
		max = 100
	}
	update_oil_crisis_modifier = yes
	custom_effect_tooltip = add_oil_crisis_var_c_tooltip
}

update_oil_crisis_modifier = {
	add_to_variable = { TBR_PRC_energy_GUI_dirty = 1 }
	set_temp_variable = { PRC_oil_crisis_consumer_factor_var_temp = 0 }
	set_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = 0 }
	set_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = 0 }
	set_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = 0 }
	set_temp_variable = { PRC_oil_crisis_production_speed_buildings_factor_var_temp = 0 }
	set_temp_variable = { PRC_oil_crisis_fuel_gain_factor_var_temp = 0 }
	if = {
		limit = {
			check_variable = {
				var = PRC_oil_crisis_a_var
				value = 80
				compare = greater_than_or_equals
			}
		}
		add_to_temp_variable = { PRC_oil_crisis_consumer_factor_var_temp = 0.2 }
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = -0.2 }
		add_to_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = -0.2 }
		add_to_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = -0.2 }
		add_to_temp_variable = { PRC_oil_crisis_production_speed_buildings_factor_var_temp = -0.2 }
	}
	else_if = {
		limit = {
			check_variable = {
				var = PRC_oil_crisis_a_var
				value = 60
				compare = greater_than_or_equals
			}
		}
		add_to_temp_variable = { PRC_oil_crisis_consumer_factor_var_temp = 0.15 }
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = -0.15 }
		add_to_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = -0.15 }
		add_to_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = -0.15 }
		add_to_temp_variable = { PRC_oil_crisis_production_speed_buildings_factor_var_temp = -0.15 }
	}
	else_if = {
		limit = {
			check_variable = {
				var = PRC_oil_crisis_a_var
				value = 40
				compare = greater_than_or_equals
			}
		}
		add_to_temp_variable = { PRC_oil_crisis_consumer_factor_var_temp = 0.10 }
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = -0.10 }
		add_to_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = -0.10 }
		add_to_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = -0.10 }
		add_to_temp_variable = { PRC_oil_crisis_production_speed_buildings_factor_var_temp = -0.10 }
	}
	else_if = {
		limit = {
			check_variable = {
				var = PRC_oil_crisis_a_var
				value = 20
				compare = greater_than_or_equals
			}
		}
		add_to_temp_variable = { PRC_oil_crisis_consumer_factor_var_temp = 0.06 }
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = -0.06 }
		add_to_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = -0.06 }
		add_to_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = -0.06 }
		add_to_temp_variable = { PRC_oil_crisis_production_speed_buildings_factor_var_temp = -0.06 }
	}
	else = {
		add_to_temp_variable = { PRC_oil_crisis_consumer_factor_var_temp = 0.03 }
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = -0.03 }
		add_to_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = -0.03 }
		add_to_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = -0.03 }
		add_to_temp_variable = { PRC_oil_crisis_production_speed_buildings_factor_var_temp = -0.03 }
	}
	if = {
		limit = {
			check_variable = {
				var = PRC_oil_crisis_b_var
				value = 70
				compare = greater_than_or_equals
			}
		}
		add_to_temp_variable = { PRC_oil_crisis_consumer_factor_var_temp = -0.10 }
		add_to_temp_variable = { PRC_oil_crisis_fuel_gain_factor_var_temp = 0.1 }
	}
	else_if = {
		limit = {
			check_variable = {
				var = PRC_oil_crisis_b_var
				value = 10
				compare = greater_than_or_equals
			}
		}
		add_to_temp_variable = { PRC_oil_crisis_consumer_factor_var_temp = -0.05 }
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = 0.1 }
	}
	else = {
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = -0.15 }
	}
	if = {
		limit = {
			check_variable = {
				var = PRC_oil_crisis_c_var
				value = 80
				compare = greater_than_or_equals
			}
		}
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = 0.1 }
		add_to_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = 0.25 }
		add_to_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = 0.30 }
	}
	else_if = {
		limit = {
			check_variable = {
				var = PRC_oil_crisis_c_var
				value = 60
				compare = greater_than_or_equals
			}
		}
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = 0.05 }
		add_to_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = 0.20 }
		add_to_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = 0.25 }
	}
	else_if = {
		limit = {
			check_variable = {
				var = PRC_oil_crisis_c_var
				value = 40
				compare = greater_than_or_equals
			}
		}
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = 0.05 }
		add_to_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = 0.15 }
		add_to_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = 0.20}
	}
	else_if = {
		limit = {
			check_variable = {
				var = PRC_oil_crisis_c_var
				value = 20
				compare = greater_than_or_equals
			}
		}
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = 0.05 }
		add_to_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = 0.10 }
		add_to_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = 0.15 }
	}
	else = {
		add_to_temp_variable = { PRC_oil_crisis_stability_factor_var_temp = 0.05 }
		add_to_temp_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp = 0.05 }
		add_to_temp_variable = { PRC_oil_crisis_business_value_factor_var_temp = 0.10 }
	}
	ROOT = {
		set_variable = { PRC_oil_crisis_consumer_factor_var = PRC_oil_crisis_consumer_factor_var_temp }
		set_variable = { PRC_oil_crisis_stability_factor_var = PRC_oil_crisis_stability_factor_var_temp }
		set_variable = { PRC_oil_crisis_production_factory_max_efficiency_factor_var = PRC_oil_crisis_production_factory_max_efficiency_factor_var_temp }
		set_variable = { PRC_oil_crisis_business_value_factor_var = PRC_oil_crisis_business_value_factor_var_temp }
		set_variable = { PRC_oil_crisis_production_speed_buildings_factor_var = PRC_oil_crisis_production_speed_buildings_factor_var_temp }
		set_variable = { PRC_oil_crisis_fuel_gain_factor_var = PRC_oil_crisis_fuel_gain_factor_var_temp }
	}
}


PRC_increase_corona = {
	if = {
		limit = {
			has_idea = PRC_coronavirus_pandemic_idea4
		}
		swap_ideas = {
			remove_idea = PRC_coronavirus_pandemic_idea4
			add_idea = PRC_coronavirus_pandemic_idea3
		}
		PRC_damage_economic_1 = yes
		if = {
			limit = {
				NOT = {
					has_country_flag = PRC_covid_reached_2
				}
			}
			set_country_flag = PRC_covid_reached_2
			country_event = { id = china.5 hours = 5 }
		}
		if = {
			limit = {
				NOT = {
					has_dynamic_modifier = {
						modifier = PRC_economic_recession_dynamic				
					}
				}
			}
			add_dynamic_modifier = {
				modifier = PRC_economic_recession_dynamic
			}
			country_event = {
				id = china.604
			}
		}
	}
	else_if = {
		limit = { 
			has_idea = PRC_coronavirus_pandemic_idea3
		}
		swap_ideas = {
			remove_idea = PRC_coronavirus_pandemic_idea3
			add_idea = PRC_coronavirus_pandemic_idea2
		}
		PRC_damage_economic_1 = yes
		if = {
			limit = {
				NOT = {
					has_country_flag = PRC_covid_reached_3
				}
			}
			set_country_flag = PRC_covid_reached_3
			country_event = { id = china.601 hours = 5 }
		}
	}
	else_if = {
		limit = {
			has_idea = PRC_coronavirus_pandemic_idea2
		}
		swap_ideas = {
			remove_idea = PRC_coronavirus_pandemic_idea2
			add_idea = PRC_coronavirus_pandemic_idea1
		}
		PRC_damage_economic_1 = yes
	}
	else_if = {
		limit = { 
			has_idea = PRC_coronavirus_pandemic_idea1 
		}
		swap_ideas = {
			remove_idea = PRC_coronavirus_pandemic_idea1
			add_idea = PRC_coronavirus_pandemic_idea
		}
		PRC_damage_economic_1 = yes
	}
	else_if = {
		limit = { 
			has_idea = PRC_coronavirus_pandemic_idea
		}
		add_stability = -0.1
		custom_effect_tooltip = PRC_covid_cure_effect_20_tooltip
		hidden_effect = {
			add_days_mission_timeout = {
				mission = PRC_natural_waning_coronavirus
				days = -20
			}
			add_to_variable = {
				var = PRC_covid_cure_level
				value = -20
			}
		}
		PRC_damage_economic_1 = yes
	}
	else = {
		add_ideas = PRC_coronavirus_pandemic_idea4
	}
}

#Corona
PRC_decrease_corona = {
	if = {
		limit = {
			has_idea = PRC_coronavirus_pandemic_idea4
			has_country_flag = PRC_vaccine_done
		}
		remove_ideas = PRC_coronavirus_pandemic_idea4
		set_country_flag = PRC_no_coronavirus
	}
	else_if = {
		limit = { 
			has_idea = PRC_coronavirus_pandemic_idea3
		}
		swap_ideas = {
			remove_idea = PRC_coronavirus_pandemic_idea3
			add_idea = PRC_coronavirus_pandemic_idea4
		}
	}
	else_if = {
		limit = {
			has_idea = PRC_coronavirus_pandemic_idea2
		}
		swap_ideas = {
			remove_idea = PRC_coronavirus_pandemic_idea2
			add_idea = PRC_coronavirus_pandemic_idea3
		}
	}
	else_if = {
		limit = { 
			has_idea = PRC_coronavirus_pandemic_idea1 
		}
		swap_ideas = {
			remove_idea = PRC_coronavirus_pandemic_idea1
			add_idea = PRC_coronavirus_pandemic_idea2
		}
	}
	else_if = {
		limit = {
			has_idea = PRC_coronavirus_pandemic_idea
		}
		swap_ideas = {
			remove_idea = PRC_coronavirus_pandemic_idea
			add_idea = PRC_coronavirus_pandemic_idea1
		}
	}
}

PRC_decrease_slander = {
	if = {
		limit = {
			has_idea = PRC_covid_slander_idea_1
		}
		swap_ideas = {
			remove_idea = PRC_covid_slander_idea_1
			add_idea = PRC_covid_slander_idea_2
		}
	}
	else_if = {
		limit = { 
			has_idea = PRC_covid_slander_idea_2
		}
		remove_ideas = PRC_covid_slander_idea_2
	}
}

PRC_cardgame_init = {
	set_country_flag = PRC_financial_crisis_started
	set_country_flag = PRC_financial_crisis_on_going
	custom_effect_tooltip = PRC_cardgame_init_tt
	hidden_effect = {
		activate_mission = PRC_cardgame_turn_timer
		set_temp_variable = { GER_card_added = PRC_decision_targeted_rate_stable_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = PRC_decision_forex_risk_reserve_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = PRC_decision_foreign_investor_talk_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = PRC_decision_expand_business_invest_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = PRC_decision_expand_business_invest_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = PRC_decision_bulk_price_control_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = PRC_decision_emergency_plan_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = PRC_decision_stock_positive_news_object }
		GER_bm_card_add = yes

	}

	set_variable = { PRC_economic_stability_var = 54}
	set_variable = { PRC_economic_liquidity_var = 56}
	set_variable = { PRC_economic_crisis_var = 74}
	set_variable = { PRC_economic_multi_var = 1}
	set_variable = { PRC_economic_crisis_loop_var = 8}
	set_variable = { PRC_economic_liquidity_loop_var = 6}
	set_variable = { PRC_cardgame_debt_cost_factor = 1}
	set_variable = { PRC_cardgame_pp_cost_factor = 30}

	for_each_scope_loop = {
		array = GER_bm_cardgame_cards_array
		clear_variable = cards_drawn # clear count of drawn cards
		clear_variable = copies_in_discard # clear count of discarded cards
	}
	clear_array = GER_bm_cardgame_cards_drawn_array # remove any unplayed cards from last hand
	clear_array = GER_bm_cardgame_discard_array # remove all discarded cards


	set_temp_variable = { GER_cards_to_draw = 4 }
	custom_effect_tooltip = PRC_cardgame_draw_tt
	add_to_variable = { TBR_PRC_finance_GUI_dirty = 1 }
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = PRC_financial_crisis
		}
		add_dynamic_modifier = {
			modifier = PRC_market
		}
		PRC_cardgame_turn_start = true
	}
}

PRC_cardgame_update_status_tt = {
	if = {
		limit = {
			has_variable = PRC_economic_stability_var_temp
		}
		multiply_variable = {
			var = PRC_economic_stability_var_temp
			value = PRC_economic_multi_var
		}
		custom_effect_tooltip = PRC_cardgame_add_stability_var_tt
	}
	if = {
		limit = {
			has_variable = PRC_economic_liquidity_var_temp
		}
		multiply_variable = {
			var = PRC_economic_liquidity_var_temp
			value = PRC_economic_multi_var
		}
		custom_effect_tooltip = PRC_cardgame_add_liquidity_var_tt
	}
	if = {
		limit = {
			has_variable = PRC_economic_crisis_var_temp
		}
		multiply_variable = {
			var = PRC_economic_crisis_var_temp
			value = PRC_economic_multi_var
		}
		custom_effect_tooltip = PRC_cardgame_add_crisis_var_tt
	}
}

PRC_cardgame_update_status = {
	if = {
		limit = {
			has_variable = PRC_economic_stability_var_temp
		}
		multiply_temp_variable = {
			var = PRC_economic_stability_var_temp
			value = PRC_economic_multi_var
		}
		custom_effect_tooltip = PRC_cardgame_add_stability_var_tt
		add_to_variable = {
			var = PRC_economic_stability_var
			value = PRC_economic_stability_var_temp
		}
		clamp_variable = {
			var = PRC_economic_stability_var
			min = 0
			max = 100
		}
	}
	if = {
		limit = {
			has_variable = PRC_economic_liquidity_var_temp
		}
		multiply_temp_variable = {
			var = PRC_economic_liquidity_var_temp
			value = PRC_economic_multi_var
		}
		custom_effect_tooltip = PRC_cardgame_add_liquidity_var_tt
		add_to_variable = {
			var = PRC_economic_liquidity_var
			value = PRC_economic_liquidity_var_temp
		}
		clamp_variable = {
			var = PRC_economic_liquidity_var
			min = 0
			max = 100
		}
	}
	set_temp_variable = { market_value = PRC_economic_stability_var}
	subtract_from_temp_variable = { market_value = PRC_economic_liquidity_var}
	if = {
		limit = { check_temp_variable = { market_value > 80 } }
		set_variable = { PRC_market_political_power_factor_var = 0.15 }
		set_variable = { PRC_market_stability_weekly_var = 0.5 }
		set_variable = { PRC_market_industrial_capacity_factory_var = 0.2 }
		set_variable = { PRC_market_society_development_monthly_var = 0.08 }
	}
	else_if = {
		limit = { check_temp_variable = { market_value > 60 } }
		set_variable = { PRC_market_political_power_factor_var = 0.12 }
		set_variable = { PRC_market_stability_weekly_var = 0.4 }
		set_variable = { PRC_market_industrial_capacity_factory_var = 0.15 }
		set_variable = { PRC_market_society_development_monthly_var = 0.06 }
	}
	else_if = {
		limit = { check_temp_variable = { market_value > 40 } }
		set_variable = { PRC_market_political_power_factor_var = 0.10 }
		set_variable = { PRC_market_stability_weekly_var = 0.3 }
		set_variable = { PRC_market_industrial_capacity_factory_var = 0.10 }
		set_variable = { PRC_market_society_development_monthly_var = 0.04 }
	}
	else_if = {
		limit = { check_temp_variable = { market_value > 20 } }
		set_variable = { PRC_market_political_power_factor_var = 0.05 }
		set_variable = { PRC_market_stability_weekly_var = 0.2 }
		set_variable = { PRC_market_industrial_capacity_factory_var = 0.05 }
		set_variable = { PRC_market_society_development_monthly_var = 0.02 }
	}
	else_if = {
		limit = { check_temp_variable = { market_value > -20 } }
		set_variable = { PRC_market_political_power_factor_var = 0.0 }
		set_variable = { PRC_market_stability_weekly_var = 0.0 }
		set_variable = { PRC_market_industrial_capacity_factory_var = 0.0 }
		set_variable = { PRC_market_society_development_monthly_var = 0.0 }
	}
	else_if = {
		limit = { check_temp_variable = { market_value > -40 } }
		set_variable = { PRC_market_political_power_factor_var = -0.05 }
		set_variable = { PRC_market_stability_weekly_var = -0.2 }
		set_variable = { PRC_market_industrial_capacity_factory_var = -0.05 }
		set_variable = { PRC_market_society_development_monthly_var = -0.02 }
	}
	else_if = {
		limit = { check_temp_variable = { market_value > -60 } }
		set_variable = { PRC_market_political_power_factor_var = -0.10 }
		set_variable = { PRC_market_stability_weekly_var = -0.3 }
		set_variable = { PRC_market_industrial_capacity_factory_var = -0.10 }
		set_variable = { PRC_market_society_development_monthly_var = -0.04 }
	}
	else_if = {
		limit = { check_temp_variable = { market_value > -80 } }
		set_variable = { PRC_market_political_power_factor_var = -0.12 }
		set_variable = { PRC_market_stability_weekly_var = -0.4 }
		set_variable = { PRC_market_industrial_capacity_factory_var = -0.15 }
		set_variable = { PRC_market_society_development_monthly_var = -0.06 }
	}
	else = {
		set_variable = { PRC_market_political_power_factor_var = -0.15 }
		set_variable = { PRC_market_stability_weekly_var = -0.5 }
		set_variable = { PRC_market_industrial_capacity_factory_var = -0.20 }
		set_variable = { PRC_market_society_development_monthly_var = -0.08 }
	}
	if = {
		limit = {
			has_variable = PRC_economic_crisis_var_temp
		}
		multiply_temp_variable = {
			var = PRC_economic_crisis_var_temp
			value = PRC_economic_multi_var
		}
		custom_effect_tooltip = PRC_cardgame_add_crisis_var_tt
		add_to_variable = {
			var = PRC_economic_crisis_var
			value = PRC_economic_crisis_var_temp
		}
		clamp_variable = {
			var = PRC_economic_crisis_var
			min = 0
			max = 100
		}
	}
	if = {
		limit = { check_variable = { PRC_economic_crisis_var > 80 } }
		set_variable = { PRC_financial_crisis_consumer_goods_factor_var = 0.2 }
		set_variable = { PRC_financial_crisis_stability_factor_var = -0.2 }
		set_variable = { PRC_financial_crisis_business_value_factor_var = -0.25 }
		set_variable = { PRC_financial_crisis_poverty_development_monthly = -0.05 }
		set_variable = { PRC_financial_crisis_income_growth_factor = -0.1 }
	}
	else_if = {
			limit = { check_variable = { PRC_economic_crisis_var > 60 } }
			set_variable = { PRC_financial_crisis_consumer_goods_factor_var = 0.15 }
			set_variable = { PRC_financial_crisis_stability_factor_var = -0.15 }
			set_variable = { PRC_financial_crisis_business_value_factor_var = -0.2 }
			set_variable = { PRC_financial_crisis_poverty_development_monthly = -0.05 }
			set_variable = { PRC_financial_crisis_income_growth_factor = -0.08 }
		}
	else_if = {
			limit = { check_variable = { PRC_economic_crisis_var > 40 } }
			set_variable = { PRC_financial_crisis_consumer_goods_factor_var = 0.10 }
			set_variable = { PRC_financial_crisis_stability_factor_var = -0.10 }
			set_variable = { PRC_financial_crisis_business_value_factor_var = -0.15 }
			set_variable = { PRC_financial_crisis_poverty_development_monthly = -0.02 }
			set_variable = { PRC_financial_crisis_income_growth_factor = -0.06 }
		}
	else_if = {
			limit = { check_variable = { PRC_economic_crisis_var > 20 } }
			set_variable = { PRC_financial_crisis_consumer_goods_factor_var = 0.08 }
			set_variable = { PRC_financial_crisis_stability_factor_var = -0.08 }
			set_variable = { PRC_financial_crisis_business_value_factor_var = -0.10 }
			set_variable = { PRC_financial_crisis_poverty_development_monthly = -0.02 }
			set_variable = { PRC_financial_crisis_income_growth_factor = -0.04 }
		}
	else = { 
		set_variable = { PRC_financial_crisis_consumer_goods_factor_var = 0.05 }
		set_variable = { PRC_financial_crisis_stability_factor_var = -0.05 }
		set_variable = { PRC_financial_crisis_business_value_factor_var = -0.05 }
		set_variable = { PRC_financial_crisis_poverty_development_monthly = 0.0 }
		set_variable = { PRC_financial_crisis_income_growth_factor = -0.02 }
	}
	if = {
		limit = {
			OR = {
				has_variable = PRC_economic_liquidity_var_temp
				has_variable = PRC_economic_stability_var_temp
				has_variable = PRC_economic_crisis_var_temp
			}

		}
		set_variable = { PRC_economic_multi_var = 1}
	}
	add_to_variable = { TBR_PRC_finance_GUI_dirty = 1 }
}

GER_bm_card_add = {
	if = {
		limit = { NOT = { is_in_array = { GER_bm_cardgame_cards_array = GER_card_added } } }
		add_to_array = { GER_bm_cardgame_cards_array = GER_card_added }
		log = "[?GER_card_added:card_id.GetTokenKey] cards add to array"
	}
	var:GER_card_added = {
		add_to_variable = { total_copies = 1 } #doing this is not super elegeant but it should work pretty well - too lazy to refactor draw logic properly...
	}

	meta_effect = {
		text = {
			custom_effect_tooltip = "[GER_CARD_ID]_add_tt"
		}
		GER_CARD_ID = "[?GER_card_added:card_id.GetTokenKey]"
	}
}

PRC_cardgame_apply_effect = {
	#更新变量
	PRC_cardgame_update_status = yes
	#弃牌/消耗牌
	GER_bm_cardgame_discard_remove = yes

	hidden_effect = {
		scoped_sound_effect = construction
	}
}

GER_bm_cardgame_discard_remove = {
	if = {
		limit = {
			var:PRC_card_played = {
				has_character_flag = remove_after_play
			}
		}

		set_temp_variable = { GER_card_removed = PRC_card_played }
		GER_bm_card_remove = yes
	}
	else = {
		set_temp_variable = { GER_card_discarded = PRC_card_played }
		GER_bm_card_discard = yes
	}
}

GER_bm_card_discard = {
	log = "[?GER_card_discarded:card_id.GetTokenKey] cards discard"
	if = {
		limit = { is_in_array = { GER_bm_cardgame_cards_drawn_array = GER_card_discarded } }
		remove_from_array = { GER_bm_cardgame_cards_drawn_array = GER_card_discarded }
	}
	if = {
		limit = { NOT = { is_in_array = { GER_bm_cardgame_discard_array = GER_card_discarded } } }
		add_to_array = { GER_bm_cardgame_discard_array = GER_card_discarded }
	}
	var:GER_card_discarded = {
		add_to_variable = { cards_drawn = -1 }
		add_to_variable = { copies_in_discard = 1 }
	}
}

PRC_cardgame_turn_end = {
	set_variable = { PRC_economic_multi_var = 1}
	if = {
		limit = {
			has_country_flag = PRC_financial_crisis_on_going
			check_variable = { PRC_economic_liquidity_var > PRC_economic_stability_var }
			NOT = {
				has_country_flag = PRC_card_emergency_plan_work
			}
		}
		set_temp_variable = { PRC_economic_crisis_var_temp = PRC_economic_crisis_loop_var}
	}
	if = {
		limit = {
			has_country_flag = PRC_financial_crisis_on_going
		}
		set_temp_variable = { PRC_economic_liquidity_var_temp = PRC_economic_liquidity_loop_var}
	}
	else = {
		set_temp_variable = { PRC_economic_liquidity_var_temp = 2}
	}
	PRC_cardgame_update_status = yes

	if = {
		limit = {
			has_country_flag = PRC_financial_crisis_on_going
			NOT = {
				check_variable = { PRC_economic_crisis_var > 0 }
			}
		}
		clr_country_flag = PRC_financial_crisis_on_going
		country_event = {id = china.743}
	}

	for_each_scope_loop = {
		array = GER_bm_cardgame_cards_array
		clear_variable = cards_drawn # clear count of drawn cards
		clear_variable = copies_in_discard # clear count of discarded cards
	}
	clear_array = GER_bm_cardgame_cards_drawn_array # remove any unplayed cards from last hand
	clear_array = GER_bm_cardgame_discard_array # remove all discarded cards


	PRC_cardgame_turn_start = yes
}

PRC_cardgame_turn_start = {
	if = {
		limit = { has_country_flag = PRC_card_emergency_plan_next }
		set_country_flag = PRC_card_emergency_plan_work
	}
	else = {
		clr_country_flag = PRC_card_emergency_plan_work
	}
	clr_country_flag = PRC_card_emergency_plan_next
	set_temp_variable = { GER_cards_to_draw = 4 }
	if = {
		limit = { PRC_economic_liquidity_var > 80}
		set_temp_variable = {PRC_cardgame_tide_good_weight = 20}
		set_temp_variable = {PRC_cardgame_tide_bad_weight = 48}
		set_temp_variable = {PRC_cardgame_tide_worst_weight = 32}
	}
	else_if = {
		limit = { PRC_economic_liquidity_var > 40}
		set_temp_variable = {PRC_cardgame_tide_good_weight = 40}
		set_temp_variable = {PRC_cardgame_tide_bad_weight = 48}
		set_temp_variable = {PRC_cardgame_tide_worst_weight = 12}
	}
	else_if = {
		limit = { PRC_economic_liquidity_var > 10}
		set_temp_variable = {PRC_cardgame_tide_good_weight = 60}
		set_temp_variable = {PRC_cardgame_tide_bad_weight = 36}
		set_temp_variable = {PRC_cardgame_tide_worst_weight = 4}
	}
	else = {
		set_temp_variable = {PRC_cardgame_tide_good_weight = 100}
		set_temp_variable = {PRC_cardgame_tide_bad_weight = 0}
		set_temp_variable = {PRC_cardgame_tide_worst_weight = 0}
	}
	if = {
		limit = { has_country_flag = PRC_cardgame_god_bless_u }
		set_temp_variable = {PRC_cardgame_tide_good_weight = 100}
		set_temp_variable = {PRC_cardgame_tide_bad_weight = 0}
		set_temp_variable = {PRC_cardgame_tide_worst_weight = 0}
	}
	random_list = { #这里是决定下一轮市场波动！
		PRC_cardgame_tide_good_weight = {
			add_to_variable = { PRC_economic_multi_var = 1}
			activate_mission = PRC_decision_tide_cooperating_enterprises
			add_to_temp_variable = { GER_cards_to_draw = 1 }
			custom_effect_tooltip = PRC_cardgame_tide_extra_draw
			set_temp_variable = { PRC_economic_liquidity_var_temp = -6}
			PRC_cardgame_update_status = yes
			set_variable = { market_flow = 1}
		}
		PRC_cardgame_tide_bad_weight = {
			activate_mission = PRC_decision_tide_capital_flight
			subtract_from_temp_variable = { GER_cards_to_draw = 1 }
			custom_effect_tooltip = PRC_cardgame_tide_reduce_draw
			set_variable = { PRC_cardgame_debt_cost_factor = 2}
			activate_mission = PRC_decision_tide_cost_uncontrol
			set_variable = { PRC_cardgame_pp_cost_factor = 60}
			activate_mission = PRC_decision_tide_bad_policy
			set_variable = { market_flow = 2}
		}
		PRC_cardgame_tide_worst_weight = {
			activate_mission = PRC_decision_tide_black_swan
			set_variable = { market_flow = 3}
		}
	}
	custom_effect_tooltip = PRC_cardgame_draw_tt
	hidden_effect = {
		PRC_cardgame_draw = yes
		activate_mission = PRC_cardgame_turn_timer
	}
	clr_country_flag = PRC_cardgame_god_bless_u
}

PRC_cardgame_draw = {

	#create counter of available cards
	set_temp_variable = { total_available_cards = 0 }


	if = {
		limit = {
			#build temp array of applicable cards
			all_of_scopes = {
				array = GER_bm_cardgame_cards_array
				if = {
					#if a card was played to fire this effect, prevent infinite draw loop exploits
					limit = { NOT = { check_variable = { PRC_card_played = THIS } } }
		
					#check if there are any available cards to draw from the deck
					set_temp_variable = { available_cards = total_copies }
					subtract_from_temp_variable = { available_cards = cards_drawn }
					subtract_from_temp_variable = { available_cards = copies_in_discard }
					if = {
						limit = { check_variable = { available_cards > 0 } }
						add_to_temp_array = { GER_bm_cardgame_cards_array_to_draw_from = THIS }
					}
		
					#add available cards to counter
					add_to_temp_variable = { total_available_cards = available_cards }
				}
			}
			#check if there are any available
			check_variable = { total_available_cards > 0 }
		}
		log = "[?total_available_cards] cards to draw 133"
		#variable bounds
		clamp_temp_variable = { var = GER_cards_to_draw min = 1 max = total_available_cards }
		custom_effect_tooltip = PRC_cardgame_draw_tt

		while_loop_effect = {
			limit = { check_variable = { GER_cards_to_draw > 0 } }

			#output uses max - 1, so the interval is [0, GER_bm_cardgame_cards_array_to_draw_from^num]
			set_temp_variable_to_random = {
				var = GER_card_drawn_index
				min = 0
				max = GER_bm_cardgame_cards_array_to_draw_from^num
				integer = yes
			}

			var:GER_bm_cardgame_cards_array_to_draw_from^GER_card_drawn_index = {
				log = "[THIS.GetName] set as card to be drawn"
				add_to_variable = { cards_drawn = 1 }
				if = {
					limit = { NOT = { is_in_array = { PREV.GER_bm_cardgame_cards_drawn_array = THIS } } }
					add_to_array = { PREV.GER_bm_cardgame_cards_drawn_array = THIS }
				}

				#remove from discard pile if applicable
				if = {
					limit = { is_in_array = { PREV.GER_bm_cardgame_discard_array = THIS } }
					add_to_variable = { copies_in_discard = -1 }
					if = {
						limit = { check_variable = { copies_in_discard < 1 } }
						remove_from_array = { PREV.GER_bm_cardgame_cards_drawn_array = THIS }
					}
				}

				#if all copies were drawn, ignore this one from in subsequent loops
				set_temp_variable = { available_cards = total_copies }
				subtract_from_temp_variable = { available_cards = cards_drawn }
				subtract_from_temp_variable = { available_cards = copies_in_discard }
				if = {
					limit = { NOT = { check_variable = { available_cards > 0 } } }
					remove_from_temp_array = { GER_bm_cardgame_cards_array_to_draw_from = THIS }
				}
			}

			subtract_from_temp_variable = { GER_cards_to_draw = 1 }
		}
	}
	else = {
		custom_effect_tooltip = PRC_cardgame_draw_fail_tt
	}
}

PRC_tw_war_prepare = {
	add_to_variable = {
		var = PRC_tw_war_stability_factor_var
		value = 0.06
	}
	add_to_variable = {
		var = PRC_tw_war_support_factor_var
		value = 0.01
	}
	effect_tooltip = {
		swap_ideas = {
			remove_idea = PRC_tw_war_dummy
			add_idea = PRC_tw_war_add_prepare_1
		}
	}
}

PRC_civ_to_mil = {
	random_owned_controlled_state = {
		limit = {
			is_core_of = ROOT
			industrial_complex > 0
			free_building_slots = {
				building = arms_factory
				size > 1
				include_locked = yes
			}
		}
		add_building_construction = {
			type = industrial_complex
			level = -1
			instant_build = yes
		}
		add_building_construction = {
			type = arms_factory
			level = 2
			instant_build = yes
		}
	}
}

PRC_slient_dawn_effect = {
	news_event = china.82
	CHI = {
		add_timed_idea = {
			idea = CHI_silent_dawn
			days = 180
		}
		every_owned_state = {
			damage_building = {
				 type = infrastructure
				 damage = 0.75
			}
			damage_building = {
				 type = arms_factory
				 damage = 0.5
			}
			damage_building = {
				 type = industrial_complex
				 damage = 0.5
			}
			damage_building = {
				 type = dockyard
				 damage = 0.5
			}
		}					
	}
}

PRC_calc_tw_defence = {
	custom_effect_tooltip = PRC_alert_tt
	set_temp_variable = {taiwan_alert_value_temp = taiwan_alert_value}
	clamp_temp_variable = {var = taiwan_alert_value_temp min = 0 max = 5}
	if = {
		limit = {taiwan_alert_value_temp < 1}
		set_temp_variable = {oob_milta = 20}
		set_temp_variable = {oob_inf = 0}
	}
	else_if = {
		limit = {taiwan_alert_value_temp < 2}
		set_temp_variable = {oob_milta = 16}
		set_temp_variable = {oob_inf = 4}
	}
	else_if = {
		limit = {taiwan_alert_value_temp < 3}
		set_temp_variable = {oob_milta = 12}
		set_temp_variable = {oob_inf = 8}
	}
	else_if = {
		limit = {taiwan_alert_value_temp < 4}
		set_temp_variable = {oob_milta = 8}
		set_temp_variable = {oob_inf = 12}
	}
	else_if = {
		limit = {taiwan_alert_value_temp < 5}
		set_temp_variable = {oob_milta = 4}
		set_temp_variable = {oob_inf = 16}
	}
	else = {
		set_temp_variable = {oob_milta = 0}
		set_temp_variable = {oob_inf = 20}
	}
	meta_effect = {
		text = {
			custom_effect_tooltip = PRC_tw_alert_[VALUE]
		}
		VALUE = "[?taiwan_alert_value_temp]"
	}
	CHI = {
		load_oob = CHI_alert_0
	}
	if = {
		limit = { check_temp_variable = {oob_milta > 0}}
		1148 = {
			create_unit = {
				division = "name = \"Minbing\" division_template = \"tw Minbing\""
				count = oob_milta
				owner = CHI
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	if = {
		limit = { check_temp_variable = {oob_inf > 0}}
		1148 = {
			create_unit = {
				division = "name = \"Bubing\" division_template = \"tw Bubing\""
				count = oob_inf
				owner = CHI
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
}

PRC_calc_ryu_defence = {
	set_temp_variable = {taiwan_alert_value_temp = taiwan_alert_value}
	clamp_temp_variable = {var = taiwan_alert_value_temp min = 0 max = 5}
	meta_effect = {
		text = {
			custom_effect_tooltip = PRC_ryu_alert_[VALUE]
		}
		VALUE = "[?taiwan_alert_value_temp]"
	}
	if = {
		limit = { check_temp_variable = {oob_milta > 0}}
		526 = {
			create_unit = {
				division = "name = \"Minbing\" division_template = \"tw Minbing\""
				count = oob_milta
				owner = CHI
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	if = {
		limit = { check_temp_variable = {oob_inf > 0}}
		526 = {
			create_unit = {
				division = "name = \"Bubing\" division_template = \"tw Bubing\""
				count = oob_inf
				owner = CHI
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
}

PRC_calc_jap_defence = {
	set_temp_variable = {taiwan_alert_value_temp = taiwan_alert_value}
	clamp_temp_variable = {var = taiwan_alert_value_temp min = 0 max = 5}
	meta_effect = {
		text = {
			custom_effect_tooltip = PRC_jap_alert_[VALUE]
		}
		VALUE = "[?taiwan_alert_value_temp]"
	}
	hidden_effect = {
		load_oob = CHI_alert_0
		JAP = {
			meta_effect = {
				text = {
					load_oob = CHI_alert[VALUE]
					if = {
						limit = { has_country_flag = taiwan_war_difficulty_normal }
						load_oob = CHI_alert[VALUE]
					}
					if = {
						limit = { has_country_flag = taiwan_war_difficulty_hard }
						load_oob = CHI_alert[VALUE]
						load_oob = CHI_alert[VALUE]
					}
				}
				VALUE = "[?taiwan_alert_value_temp]"
			}
		}
	}
}

PRC_end_taiwan_war = {
	clr_country_flag = PRC_prepare_taiwan_war
	clr_global_flag = PRC_ongoing_taiwan_war
	white_peace = AST
	white_peace = JAP
	annex_country = {
		target = HKN
		transfer_troops = no
	}
	326 = {
		add_dynamic_modifier = {
			modifier = PRC_hong_kong
		}
	}
	country_event = {
		id = china.250
		days = 120
	}
	country_event = {
		id = china.254
		days = 200
	}
	clr_global_flag = battle_of_okinawa
	every_state = { #защита от дебила
		limit = {
			is_owned_by = JAP
			NOT = {
				OR = {
					state = 526
					state = 876
				}
			}
		}
		remove_dynamic_modifier = {
			modifier = PRC_non_combat_area
			scope = PRC #потом скоупы поменять
		}
	}
	every_state = { #защита от дебила
		limit = {
			is_owned_by = AST
		}
		remove_dynamic_modifier = {
			modifier = PRC_non_combat_area
			scope = PRC
		}
	}
	every_state = { #защита от дебила
		limit = {
			is_owned_by = PRC
			is_coastal = yes
			NOT = {
				OR = {
					state = 326
					state = 648
				}
			}
		}
		remove_dynamic_modifier = {
			modifier = PRC_non_combat_area
		}
	}
	AST = {
		country_event = Australia.18
	}
	JAP = {
		if = {
			limit = {
				OR = {
					has_idea = low_society
					has_idea = lower_society
				}
			}
			add_ideas = medium_society
			set_temp_variable = {
				var = society_development_var_temp
				value = 0.25
			}
			add_society_development = yes
		}
	}
}

PRC_win_tw_war = {
	country_event = {
		id = china.23
	}				
	JAP = {
		country_event = { id = jap.10 days = 3 }
	}

	add_timed_idea = {
		idea = PRC_chinese_triumphalism
		days = 1000
	}
	transfer_state = 524
	transfer_state = 1150
	transfer_state = 1149
	transfer_state = 1148
	if = {
		limit = {
			controls_state = 876
		}
		transfer_state = 876
	}
	add_war_support = 0.05
	set_global_flag = PRC_taiwan_war_won
	set_country_flag = PRC_centrist_win
	PRC_end_taiwan_war = yes
	annex_country = {
		target = CHI
		transfer_troops = no
	}
	set_country_leader_portrait = {
		ideology = communist
		portrait = GFX_portrait_PRC_xi_jinping_taiwan_win
	}
	news_event = {
		id = news.356
		hours = 12
	}
	news_event = {
		id = china.80
		days = 70
	}
	load_focus_tree = china_centrist_focus
	AST = {
		country_event = {
			id = Australia.1
			days = 15
		}
	}
	every_state = {
		limit = {
			is_claimed_by = CHI
			NOT = {
				state = 524
				state = 1150
				state = 1149
				state = 1148
			}
		}
		remove_claim_by = CHI
	}
	
}

PRC_decision_dollar_claims_cash_bonus = { ##美元债券变现
	if = {
		limit = {
			check_variable = { news= 1}
		}
		#@债务-30B
		add_to_variable = { debt_var = -60 }
		#@稳定度-5
		add_stability = -0.1
		set_variable = {
			news= 0
		}
	}
	else_if = {
		limit = {
			check_variable = { news= 0}
		}
		#@债务-30B
		add_to_variable = { debt_var = -30 }
		#@稳定度-5
		add_stability = -0.05
	}

	
}

PRC_decision_manufacturing_upgrade_fund_bonus = { ##制造业转型升级基金
	if = {
		limit = {
			check_variable = { news= 1}
		}
		#@债务+10B
		add_to_variable = { debt_var = 20 }
		#@工业发展+3
		add_to_variable = { industrial_development_var = 0.06 }
		set_variable = {
			news= 0
		}
	}
	else_if = {
		limit = {
			check_variable = { news= 0}
		}
		#@债务+10B
		add_to_variable = { debt_var = 10 }
		#@工业发展+3
		add_to_variable = { industrial_development_var = 0.03 }
	}

	
}

PRC_decision_six_guarantees_stable_bonus = { ##六保六稳
	if = {
		limit = {
			check_variable = { news= 1}
		}
		 #@债务+10B
		 add_to_variable = { debt_var = 20 }
		 #@贫困率+5
		 add_to_variable = { poverty_development_var = 0.10 }
		set_variable = {
			news= 0
		}
	}
	else_if = {
		limit = {
			check_variable = { news= 0}
		}
		 #@债务+10B
		 add_to_variable = { debt_var = 10 }
		 #@贫困率+5
		 add_to_variable = { poverty_development_var = 0.05 }
	}

	
}

PRC_decision_issue_special_bonds_bonus = { ##发行特别国债
	if = {
		limit = {
			check_variable = { news= 1}
		}
		#@债务-20B
		add_to_variable = { debt_var = -40 }
		set_variable = {
			news= 0
		}
	}
	else_if = {
		limit = {
			check_variable = { news= 0}
		}
		#@债务-20B
		add_to_variable = { debt_var = -20 }
	}

	
}

TBR_scripted_random_card = {
	set_variable = {random_card = 1}
	meta_effect = {
		text = {
			if = {
				limit = {#如果卡n
					check_variable = { round_card = [cardnum] }
					check_variable = { PRC.card[cardnum] = 1 }
				}
				set_variable = { PRC.card[cardnum] = 2 }#设定为已经抽取
				add_to_variable = { cardgame_num_use = -1 }#减少一张剩余抽卡次数
				if = {
					limit = {
						check_variable = { cardgame_num_use > 0 }#检查剩余抽卡次数
					}
					country_event = tbr.zzz.3 #开启下一轮抽卡
				}
			}
			else = {#如果第n张卡没抽到，就递归进行第n+1张卡
				if = {
					limit = {
						check_variable = { random_card = 16 }
					}
					set_variable = { random_card = 1 } #归1
				}
				else = {
					add_to_variable = {random_card = 1}
					TBR_scripted_random_card = yes
				}
			    
			}
		}
		cardnum = "[?random_card]"
	}
}